here we use various commands of terraform like :
init, plan, apply, validate, fmt, show, show -json, providers, providers mirror, refresh, graph

==================================================================================

$terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/local from the dependency lock file
- Reusing previous version of hashicorp/random from the dependency lock file
- Using previously-installed hashicorp/local v2.5.1
- Using previously-installed hashicorp/random v3.6.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

==================================================================================

$terraform plan

random_pet.info: Refreshing state... [id=My-handy-lynx]
local_file.pet: Refreshing state... [id=bc9cabef1d8b0071d3c4ae9959a9c328f35fe697]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "Pets are awesome!"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

==================================================================================

$terraform apply

random_pet.info: Refreshing state... [id=My-handy-lynx]
local_file.pet: Refreshing state... [id=bc9cabef1d8b0071d3c4ae9959a9c328f35fe697]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "Pets are awesome!"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.pet: Creating...
local_file.pet: Creation complete after 0s [id=bc9cabef1d8b0071d3c4ae9959a9c328f35fe697]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

file-output = "Pets are awesome!"
pets-output = "My-handy-lynx"










































==================================================================================

$terraform validate

Success! The configuration is valid.


==================================================================================

$terraform fmt

main.tf

$ cat main.tf 

resource "local_file" "pet" {
  filename = "pets.txt"
  content  = "Pets are awesome!"
}

resource "random_pet" "info" {
  prefix    = "My"
  separator = "-"
  length    = "2"
}

output "file-output" {
  value = local_file.pet.content
}

output "pets-output" {
  value = random_pet.info.id
}


==================================================================================

$terraform show

einfochips@AHMLPT2611:~/Desktop/harsh/terraform/test_terra_local/8.terraform_commands$ terraform show
# local_file.pet:
resource "local_file" "pet" {
    content              = "Pets are awesome!"
    content_base64sha256 = "i7rWzn9abCr4YD3OzXUQ+IAKv/aHZDmZnMimppETNUA="
    content_base64sha512 = "SjI4RcQ6Di69Yj68r+JFJ/Gl2J6jo/w0jGJvNWhlLVgZ5lHA0eRXnEwxLqb1yaHnU9VDaU9DZ1JrhxLRHhZxPg=="
    content_md5          = "e0911faa99c2a35a6d3d884ffbff6489"
    content_sha1         = "bc9cabef1d8b0071d3c4ae9959a9c328f35fe697"
    content_sha256       = "8bbad6ce7f5a6c2af8603dcecd7510f8800abff6876439999cc8a6a691133540"
    content_sha512       = "4a323845c43a0e2ebd623ebcafe24527f1a5d89ea3a3fc348c626f3568652d5819e651c0d1e4579c4c312ea6f5c9a1e753d543694f4367526b8712d11e16713e"
    directory_permission = "0777"
    file_permission      = "0777"
    filename             = "pets.txt"
    id                   = "bc9cabef1d8b0071d3c4ae9959a9c328f35fe697"
}

# random_pet.info:
resource "random_pet" "info" {
    id        = "My-handy-lynx"
    length    = 2
    prefix    = "My"
    separator = "-"
}


Outputs:

file-output = "Pets are awesome!"
pets-output = "My-handy-lynx"

==================================================================================

$ terraform show -json

{"format_version":"1.0","terraform_version":"1.8.0","values":{"outputs":{"file-output":{"sensitive":false,"value":"Pets are awesome!","type":"string"},"pets-output":{"sensitive":false,"value":"My-handy-lynx","type":"string"}},"root_module":{"resources":[{"address":"local_file.pet","mode":"managed","type":"local_file","name":"pet","provider_name":"registry.terraform.io/hashicorp/local","schema_version":0,"values":{"content":"Pets are awesome!","content_base64":null,"content_base64sha256":"i7rWzn9abCr4YD3OzXUQ+IAKv/aHZDmZnMimppETNUA=","content_base64sha512":"SjI4RcQ6Di69Yj68r+JFJ/Gl2J6jo/w0jGJvNWhlLVgZ5lHA0eRXnEwxLqb1yaHnU9VDaU9DZ1JrhxLRHhZxPg==","content_md5":"e0911faa99c2a35a6d3d884ffbff6489","content_sha1":"bc9cabef1d8b0071d3c4ae9959a9c328f35fe697","content_sha256":"8bbad6ce7f5a6c2af8603dcecd7510f8800abff6876439999cc8a6a691133540","content_sha512":"4a323845c43a0e2ebd623ebcafe24527f1a5d89ea3a3fc348c626f3568652d5819e651c0d1e4579c4c312ea6f5c9a1e753d543694f4367526b8712d11e16713e","directory_permission":"0777","file_permission":"0777","filename":"pets.txt","id":"bc9cabef1d8b0071d3c4ae9959a9c328f35fe697","sensitive_content":null,"source":null},"sensitive_values":{"sensitive_content":true}},{"address":"random_pet.info","mode":"managed","type":"random_pet","name":"info","provider_name":"registry.terraform.io/hashicorp/random","schema_version":0,"values":{"id":"My-handy-lynx","keepers":null,"length":2,"prefix":"My","separator":"-"},"sensitive_values":{}}]}}}

==================================================================================

$terraform providers

Providers required by configuration:
.
├── provider[registry.terraform.io/hashicorp/random]
└── provider[registry.terraform.io/hashicorp/local]

Providers required by state:

    provider[registry.terraform.io/hashicorp/local]

    provider[registry.terraform.io/hashicorp/random]


==================================================================================

$terraform providers mirror ../temp_terra_folder

- Mirroring hashicorp/local...
  - Selected v2.5.1 to match dependency lock file
  - Downloading package for linux_amd64...
  - Package authenticated: signed by HashiCorp
- Mirroring hashicorp/random...
  - Selected v3.6.1 to match dependency lock file
  - Downloading package for linux_amd64...
  - Package authenticated: signed by HashiCorp

==================================================================================

$terraform output

file-output = "Pets are awesome!"
pets-output = "My-handy-lynx"

==================================================================================

$terraform refresh

local_file.pet: Refreshing state... [id=bc9cabef1d8b0071d3c4ae9959a9c328f35fe697]
random_pet.info: Refreshing state... [id=My-handy-lynx]

Outputs:

file-output = "Pets are awesome!"
pets-output = "My-handy-lynx"


==================================================================================

$ Terraform graph | dot -Tsvg > terraform.svg
$ ls
main.tf  notes.txt  pets.txt  terraform.svg  terraform.tfstate  terraform.tfstate.backup


